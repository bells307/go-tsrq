// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: protobuf/tsrq.proto

package tsrq_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TSRQService_Enqueue_FullMethodName = "/grpc.TSRQService/Enqueue"
	TSRQService_Dequeue_FullMethodName = "/grpc.TSRQService/Dequeue"
	TSRQService_Remove_FullMethodName  = "/grpc.TSRQService/Remove"
	TSRQService_Exists_FullMethodName  = "/grpc.TSRQService/Exists"
	TSRQService_Count_FullMethodName   = "/grpc.TSRQService/Count"
)

// TSRQServiceClient is the client API for TSRQService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TSRQServiceClient interface {
	Enqueue(ctx context.Context, in *QueuedData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Dequeue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DequeueResponse, error)
	Remove(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Exists(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ExistsResponse, error)
	Count(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountResponse, error)
}

type tSRQServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTSRQServiceClient(cc grpc.ClientConnInterface) TSRQServiceClient {
	return &tSRQServiceClient{cc}
}

func (c *tSRQServiceClient) Enqueue(ctx context.Context, in *QueuedData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TSRQService_Enqueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRQServiceClient) Dequeue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DequeueResponse, error) {
	out := new(DequeueResponse)
	err := c.cc.Invoke(ctx, TSRQService_Dequeue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRQServiceClient) Remove(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TSRQService_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRQServiceClient) Exists(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, TSRQService_Exists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSRQServiceClient) Count(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, TSRQService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TSRQServiceServer is the server API for TSRQService service.
// All implementations must embed UnimplementedTSRQServiceServer
// for forward compatibility
type TSRQServiceServer interface {
	Enqueue(context.Context, *QueuedData) (*emptypb.Empty, error)
	Dequeue(context.Context, *emptypb.Empty) (*DequeueResponse, error)
	Remove(context.Context, *Id) (*emptypb.Empty, error)
	Exists(context.Context, *Id) (*ExistsResponse, error)
	Count(context.Context, *emptypb.Empty) (*CountResponse, error)
	mustEmbedUnimplementedTSRQServiceServer()
}

// UnimplementedTSRQServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTSRQServiceServer struct {
}

func (UnimplementedTSRQServiceServer) Enqueue(context.Context, *QueuedData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedTSRQServiceServer) Dequeue(context.Context, *emptypb.Empty) (*DequeueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedTSRQServiceServer) Remove(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedTSRQServiceServer) Exists(context.Context, *Id) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedTSRQServiceServer) Count(context.Context, *emptypb.Empty) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedTSRQServiceServer) mustEmbedUnimplementedTSRQServiceServer() {}

// UnsafeTSRQServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TSRQServiceServer will
// result in compilation errors.
type UnsafeTSRQServiceServer interface {
	mustEmbedUnimplementedTSRQServiceServer()
}

func RegisterTSRQServiceServer(s grpc.ServiceRegistrar, srv TSRQServiceServer) {
	s.RegisterService(&TSRQService_ServiceDesc, srv)
}

func _TSRQService_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuedData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRQServiceServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRQService_Enqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRQServiceServer).Enqueue(ctx, req.(*QueuedData))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRQService_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRQServiceServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRQService_Dequeue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRQServiceServer).Dequeue(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRQService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRQServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRQService_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRQServiceServer).Remove(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRQService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRQServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRQService_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRQServiceServer).Exists(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSRQService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSRQServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSRQService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSRQServiceServer).Count(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TSRQService_ServiceDesc is the grpc.ServiceDesc for TSRQService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TSRQService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.TSRQService",
	HandlerType: (*TSRQServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enqueue",
			Handler:    _TSRQService_Enqueue_Handler,
		},
		{
			MethodName: "Dequeue",
			Handler:    _TSRQService_Dequeue_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _TSRQService_Remove_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _TSRQService_Exists_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _TSRQService_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/tsrq.proto",
}
